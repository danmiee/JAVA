package ch04_stack_queue.Queen_fail;

class Point {
	private int ix;
	private int iy;

	public Point(int x, int y) {
		ix = x;
		iy = y;
	}

	public int getX() {
		return ix;
	}

	public int getY() {
		return iy;
	}
	public void setX(int x) {
		ix = x;
	}

	public void setY(int y) {
		iy = y;
	}
}

public class Stack2 {
	private Point[] stk; // ?¤í???? ë°°ì??
	private int capacity; // ?¤í???? ?¬ê¸°
	private int ptr; // ?¤í?? ?¬ì?¸í??

	// --- ?¤í???? ???? : ?¤í???? ë¹??´ì???? ---//
	@SuppressWarnings("serial")
	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException() {
		}
	}

	// --- ?¤í???? ???? : ?¤í???? ê°??? ì°? ---//
	@SuppressWarnings("serial")
	public class OverflowIntStackException extends RuntimeException {
		public OverflowIntStackException() {
		}
	}

	// --- ???±ì??(constructor) ---//
	public Stack2(int maxlen) {
		ptr = 0;
		capacity = maxlen;
		try {
			stk = new Point[capacity]; // ?¤í?? ë³¸ì²´?? ë°°ì?´ì?? ????
		} catch (OutOfMemoryError e) { // ???±í?? ?? ????
			capacity = 0;
		}
	}

	// --- ?¤í???? xë¥? ?¸ì?? ---//
	public Point push(Point p) throws OverflowIntStackException {
		if (ptr >= capacity) // ?¤í???? ê°??? ì°?
			throw new OverflowIntStackException();
		return stk[ptr++] = p;
	}

	// --- ?¤í?????? ?°ì?´í?°ë?? ??(?????? ???? ?°ì?´í?°ë?? êº¼ë??) ---//
	public Point pop() throws EmptyIntStackException {
		if (ptr <= 0) // ?¤í???? ë¹?
			throw new EmptyIntStackException();
		return stk[--ptr];
	}

	// --- ?¤í?????? ?°ì?´í?°ë?? ?¼í??(peek, ?????? ???? ?°ì?´í?°ë?? ?¤ì?¬ë?¤ë?) ---//
	public Point peek() throws EmptyIntStackException {
		if (ptr <= 0) // ?¤í???? ë¹?
			throw new EmptyIntStackException();
		return stk[ptr - 1];
	}

	// --- ?¤í???? ë¹??? ---//
	public void clear() {
		ptr = 0;
	}

	// --- ?¤í?????? xë¥? ì°¾ì?? ?¸ë?±ì??(ë²?ê²¬í??ì§? ëª»í??ë©? ??1)ë¥? ë°??? ---//
	public int indexOf(Point x) {
		for (int i = ptr - 1; i >= 0; i--) // ???? ìª½ì???? ????ê²???
			if (stk[i].equals(x))
				return i; // ê²??? ?±ê³µ
		return -1; // ê²??? ?¤í??
	}

	// --- ?¤í???? ?¬ê¸°ë¥? ë°??? ---//
	public int getCapacity() {
		return capacity;
	}

	// --- ?¤í???? ???¬ì???? ?°ì?´í?? ê°???ë¥? ë°??? ---//
	public int size() {
		return ptr;
	}

	// --- ?¤í???? ë¹??´ì????ê°?? ---//
	public boolean isEmpty() {
		return ptr <= 0;
	}

	// --- ?¤í???? ê°??? ì°¼ë??ê°?? ---//
	public boolean isFull() {
		return ptr >= capacity;
	}

	// --- ?¤í?? ???? ëª¨ë?? ?°ì?´í?°ë?? ë°??? ?? ???? ????ë¡? ???? ---//
	public void dump() {
		if (ptr <= 0)
			System.out.println("?¤í???? ë¹??´ì???µë????.");
		else {
			for (int i = 0; i < ptr; i++)
				System.out.print(stk[i] + " ");
			System.out.println();
		}
	}
}
